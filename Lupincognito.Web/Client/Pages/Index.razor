@page "/"
@using Microsoft.Extensions.Logging

@inject ILogger<Index> Logger
@inject IDispatcher Dispatcher

<EditForm class="row justify-content-center text-center m-2" EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />

    <h1 class="col-12 p-4"><NavLink class="text-decoration-none text-reset" href="">@Application.Name</NavLink></h1>

    <p class="col-12 lead my-3">Play <strong>@Application.Name</strong> with friends. To create or join a game, enter a game name and click 'Go'.</p>

    <div class="col-12 col-lg-9 col-xl-6">
        <div class="input-group input-group-lg py-4 mx-auto @(gameNameInvalid ? "has-validation" : string.Empty)">
            <InputText class="@GameNameInputClass" placeholder="Game Name" aria-label="Game Name" aria-describedby="go-button" @bind-Value="newGameModel.GameName" />
            <button class="btn btn-success" type="submit" id="go-button" disabled="@(gameNameInvalid)">Go!</button>
            <CustomValidationMessage Class="invalid-feedback" For="() => newGameModel.GameName" />
        </div>
    </div>    
</EditForm>

@code {
    private NewGameModel newGameModel = new()
    {
        GameName = "rainbow-sheep"
    };
    private bool gameNameInvalid = false;
    private EditContext editContext;

    private void HandleValidSubmit()
    {
        Logger.LogInformation($"Form Submitted: (Name: {newGameModel.GameName})");

        Dispatcher.Dispatch(new JoinGameAction(newGameModel.GameName));
    }
    
    private void HandleInvalidSubmit()
    {
        UpdateValidationState();
    }

    private void HandleFieldChanged(object sender, ValidationStateChangedEventArgs e)
    {
        UpdateValidationState();
    }

    private void UpdateValidationState()
    {
        var gameNameIdentifier = editContext.Field("GameName");
        
        gameNameInvalid = editContext.GetValidationMessages(gameNameIdentifier).Any();

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        editContext = new(newGameModel);
        editContext.OnValidationStateChanged += HandleFieldChanged;
    }

    private string GameNameInputClass
    {
        get
        {
            return gameNameInvalid ? "form-control is-invalid" : "form-control is-valid";
        }
    }
}